.\" Automatically generated by Pandoc 2.1.3
.\"
.TH "stellar\-core" "1" "" "" ""
.hy
.SH NAME
.PP
stellar\-core \- Core daemon for Stellar payment network
.SH SYNOPSYS
.PP
stellar\-core [OPTIONS]
.SH DESCRIPTION
.PP
Stellar is a decentralized, federated peer\-to\-peer network that allows
people to send payments in any asset anywhere in the world
instantaneously, and with minimal fee.
\f[C]Stellar\-core\f[] is the core component of this network.
\f[C]Stellar\-core\f[] is a C++ implementation of the Stellar Consensus
Protocol configured to construct a chain of ledgers that are guaranteed
to be in agreement across all the participating nodes at all times.
.SS Configuration file
.PP
In most modes of operation, stellar\-core requires a configuration file.
By default, it looks for a file called \f[C]stellar\-core.cfg\f[] in the
current working directory, but this default can be changed by the
\f[C]\-\-conf\f[] command\-line option.
The configuration file is in TOML syntax.
The full set of supported directives can be found in
\f[C]/Users/avi/stellar/share/doc/stellar\-core_example.cfg\f[].
.SS Command line options
.IP \[bu] 2
\f[B]\[en]?\f[] or \f[B]\[en]help\f[]: Print the available command line
options and then exit..
.IP \[bu] 2
\f[B]\[en]c\f[] Send an HTTP command to an already running local
instance of stellar\-core and then exit.
For example:
.PP
\f[C]$\ stellar\-core\ \-c\ info\f[]
.IP \[bu] 2
\f[B]\[en]conf FILE\f[]: Specify a config file to use.
You can use `\-' and provide the config file via STDIN.
\f[I]default `stellar\-core.cfg'\f[]
.IP \[bu] 2
\f[B]\[en]convertid ID\f[]: Will output the passed ID in all known forms
and then exit.
Useful for determining the public key that corresponds to a given
private key.
For example:
.PP
\f[C]$\ stellar\-core\ \-\-convertid\ SDQVDISRYN2JXBS7ICL7QJAEKB3HWBJFP2QECXG7GZICAHBK4UNJCWK2\f[]
.IP \[bu] 2
\f[B]\[en]dumpxdr FILE\f[]: Dumps the given XDR file and then exits.
.IP \[bu] 2
\f[B]\[en]loadxdr FILE\f[]: Load an XDR bucket file, for testing.
.IP \[bu] 2
\f[B]\[en]forcescp\f[]: This command is used to start a network from
scratch or when a network has lost quorum because of failed nodes or
otherwise.
It sets a flag in the database.
The next time stellar\-core is run, stellar\-core will start emitting
SCP messages based on its last known ledger.
Without this flag stellar\-core waits to hear a ledger close from the
network before starting SCP. forcescp doesn't change the requirements
for quorum so although this node will emit SCP messages SCP won't
complete until there are also a quorum of other nodes also emitting SCP
messages on this same ledger.
.IP \[bu] 2
\f[B]\[en]fuzz FILE\f[]: Run a single fuzz input and exit.
.IP \[bu] 2
\f[B]\[en]genfuzz FILE\f[]: Generate a random fuzzer input file.
.IP \[bu] 2
\f[B]\[en]genseed\f[]: Generate and print a random public/private key
and then exit.
.IP \[bu] 2
\f[B]\[en]inferquorum\f[]: Print a potential quorum set inferred from
history.
.IP \[bu] 2
\f[B]\[en]checkquorum\f[]: Check quorum intersection from history to
ensure there is closure over all the validators in the network.
.IP \[bu] 2
\f[B]\[en]graphquorum\f[]: Print a quorum set graph from history.
.IP \[bu] 2
\f[B]\[en]offlineinfo\f[]: Returns an output similar to
\f[C]\-\-c\ info\f[] for an offline instance
.IP \[bu] 2
\f[B]\[en]ll LEVEL\f[]: Set the log level.
It is redundant with \f[C]\-\-c\ ll\f[] but we need this form if you
want to change the log level during test runs.
.IP \[bu] 2
\f[B]\[en]metric METRIC\f[]: Report metric METRIC on exit.
Used for gathering a metric cumulatively during a test run.
.IP \[bu] 2
\f[B]\[en]newdb\f[]: Clears the local database and resets it to the
genesis ledger.
If you connect to the network after that it will catch up from scratch.
.IP \[bu] 2
\f[B]\[en]newhist ARCH\f[]: Initialize the named history archive ARCH.
ARCH should be one of the history archives you have specified in the
stellar\-core.cfg.
This will write a \f[C]\&.well\-known/stellar\-history.json\f[] file in
the archive root.
.IP \[bu] 2
\f[B]\[en]printtxn FILE\f[]: Pretty\-print a binary file containing a
\f[C]TransactionEnvelope\f[].
If FILE is \[lq]\-\[rq], the transaction is read from standard input.
.IP \[bu] 2
\f[B]\[en]signtxn FILE\f[]: Add a digital signature to a transaction
envelope stored in binary format in FILE, and send the result to
standard output (which should be redirected to a file or piped through a
tool such as \f[C]base64\f[]).
The private signing key is read from standard input, unless FILE is
\[lq]\-\[rq] in which case the transaction envelope is read from
standard input and the signing key is read from \f[C]/dev/tty\f[].
In either event, if the signing key appears to be coming from a
terminal, stellar\-core disables echo.
Note that if you do not have a STELLAR_NETWORK_ID environment variable,
then before this argument you must specify the \[en]netid option.
.IP \[bu] 2
\f[B]\[en]base64\f[]: When preceding \[en]printtxn or \[en]signtxn,
alters the behavior of the option to work on base64\-encoded XDR rather
than raw XDR.
.IP \[bu] 2
\f[B]\[en]sec2pub\f[]: Reads a secret key on standard input and outputs
the corresponding public key.
Both keys are in Stellar's standard base\-32 ASCII format.
.IP \[bu] 2
\f[B]\[en]netid STRING\f[]: The \[en]signtxn option requires a
particular network to sign for.
For example, the production stellar network is
\[lq]\f[C]Public\ Global\ Stellar\ Network\ ;\ September\ 2015\f[]\[rq]
while the test network is
\[lq]\f[C]Test\ SDF\ Network\ ;\ September\ 2015\f[]\[rq].
.IP \[bu] 2
\f[B]\[en]test\f[]: Run all the unit tests.
For further
info (https://github.com/philsquared/Catch/blob/master/docs/command-line.md)
on possible options for test.
For example this will run just the \[lq]Herder\[rq] tests and stop after
the first failure: \f[C]stellar\-core\ \-\-test\ \-a\ [Herder]\f[]
.IP \[bu] 2
\f[B]\[en]version\f[]: Print version info and then exit.
.SS HTTP Commands
.PP
By default stellar\-core listens for connections from localhost on port
11626.
You can send commands to stellar\-core via a web browser, curl, or using
the \[en]c command line option (see above).
Most commands return their results in JSON format.
.IP \[bu] 2
\f[B]help\f[] Prints a list of currently supported commands.
.IP \[bu] 2
\f[B]catchup\f[] \f[C]/catchup?ledger=NNN[&mode=MODE]\f[] Triggers the
instance to catch up to ledger NNN from history; Mode is either
`minimal' (the default, if omitted) or `complete'.
.IP \[bu] 2
\f[B]checkdb\f[] Triggers the instance to perform a background check of
the database's state.
.IP \[bu] 2
\f[B]checkpoint\f[] Triggers the instance to write an immediate history
checkpoint.
And uploads it to the archive.
.IP \[bu] 2
\f[B]connect\f[] \f[C]/connect?peer=NAME&port=NNN\f[] Triggers the
instance to connect to peer NAME at port NNN.
.IP \[bu] 2
\f[B]dropcursor\f[]
.PD 0
.P
.PD
\f[C]/dropcursor?id=XYZ\f[] deletes the tracking cursor with identified
by \f[C]id\f[].
See \f[C]setcursor\f[] for more information.
.IP \[bu] 2
\f[B]info\f[] Returns information about the server in JSON format (sync
state, connected peers, etc).
.IP \[bu] 2
\f[B]ll\f[]
.PD 0
.P
.PD
\f[C]/ll?level=L[&partition=P]\f[] Adjust the log level for partition P
(or all if no partition is specified).
Level is one of FATAL, ERROR, WARNING, INFO, DEBUG, VERBOSE, TRACE
.IP \[bu] 2
\f[B]maintenance\f[] \f[C]/maintenance?[queue=true]\f[] Performs
maintenance tasks on the instance.
.RS 2
.IP \[bu] 2
\f[C]queue\f[] performs deletion of queue data.
See \f[C]setcursor\f[] for more information.
.RE
.IP \[bu] 2
\f[B]metrics\f[] Returns a snapshot of the metrics registry (for
monitoring and debugging purpose).
.IP \[bu] 2
\f[B]peers\f[] Returns the list of known peers in JSON format.
.IP \[bu] 2
\f[B]quorum\f[] \f[C]/quorum?[node=NODE_ID][&compact=true]\f[] returns
information about the quorum for node NODE_ID (this node by default).
NODE_ID is either a full key (\f[C]GABCD...\f[]), an alias
(\f[C]$name\f[]) or an abbreviated ID (\f[C]\@GABCD\f[]).
If compact is set, only returns a summary version.
.IP \[bu] 2
\f[B]setcursor\f[] \f[C]/setcursor?id=ID&cursor=N\f[] sets or creates a
cursor identified by \f[C]ID\f[] with value \f[C]N\f[].
ID is an uppercase AlphaNum, N is an uint32 that represents the last
ledger sequence number that the instance ID processed.
Cursors are used by dependent services to tell stellar\-core which data
can be safely deleted by the instance.
The data is historical data stored in the SQL tables such as txhistory
or ledgerheaders.
When all consumers processed the data for ledger sequence N the data can
be safely removed by the instance.
The actual deletion is performed by invoking the \f[C]maintenance\f[]
endpoint or on startup.
See also \f[C]dropcursor\f[].
.IP \[bu] 2
\f[B]scp\f[] `/scp?[limit=n] Returns a JSON object with the internal
state of the SCP engine for the last n (default 2) ledgers.
.IP \[bu] 2
\f[B]tx\f[] \f[C]/tx?blob=Base64\f[] submit a
transaction (../../learn/concepts/transactions.md) to the network.
blob is a base64 encoded XDR serialized `TransactionEnvelope' returns a
JSON object with the following properties status:
.RS 2
.IP \[bu] 2
\[lq]PENDING\[rq] \- transaction is being considered by consensus
.IP \[bu] 2
\[lq]DUPLICATE\[rq] \- transaction is already PENDING
.IP \[bu] 2
\[lq]ERROR\[rq] \- transaction rejected by transaction engine error: set
when status is \[lq]ERROR\[rq].
Base64 encoded, XDR serialized `TransactionResult'
.RE
.IP \[bu] 2
\f[B]upgrades\f[]
.RS 2
.IP \[bu] 2
\f[C]/upgrades?mode=get\f[] retrieves the currently configured upgrade
settings
.IP \[bu] 2
\f[C]/upgrades?mode=clear\f[] clears any upgrade settings
.IP \[bu] 2
\f[C]/upgrades?mode=set&upgradetime=DATETIME&[basefee=NUM]&[basereserve=NUM]&[maxtxsize=NUM]&[protocolversion=NUM]\f[]
upgradetime is a required date (UTC) in the form 1970\-01\-01T00:00:00Z.
.RS 2
.IP \[bu] 2
fee (uint32) This is what you would prefer the base fee to be.
It is in stroops
.IP \[bu] 2
basereserve (uint32) This is what you would prefer the base reserve to
be.
It is in stroops.
.IP \[bu] 2
maxtxsize (uint32) This defines the maximum number of transactions to
include in a ledger.
When too many transactions are pending, surge pricing is applied.
The instance picks the top maxtxsize transactions locally to be
considered in the next ledger.Where transactions are ordered by
transaction fee(lower fee transactions are held for later).
.IP \[bu] 2
protocolversion (uint32) defines the protocol version to upgrade to.
When specified it must match the protocol version supported by the node
.RE
.RE
.SS The following HTTP commands are exposed on test instances
.IP \[bu] 2
\f[B]generateload\f[]
\f[C]/generateload[?accounts=N&txs=M&txrate=(R|auto)]\f[] Artificially
generate load for testing; must be used with
\f[C]ARTIFICIALLY_GENERATE_LOAD_FOR_TESTING\f[] set to true.
.IP \[bu] 2
\f[B]manualclose\f[] If MANUAL_CLOSE is set to true in the .cfg file.
This will cause the current ledger to close.
.IP \[bu] 2
\f[B]testacc\f[] \f[C]/testacc?name=N\f[] Returns basic information
about the account identified by name.
Note that N is a string used as seed, but \[lq]root\[rq] can be used as
well to specify the root account used for the test instance.
.IP \[bu] 2
\f[B]testtx\f[] \f[C]/testtx?from=F&to=T&amount=N&[create=true]\f[]
Injects a payment transaction (or a create transaction if
\[lq]create\[rq] is specified) from the account F to the account T,
sending N XLM to the account.
Note that F and T are seed strings but can also be specified as
\[lq]root\[rq] as a shorthand for the root account for the test
instance.
.SH EXAMPLES
.PP
See \f[C]/Users/avi/stellar/share/doc/*.cfg\f[] for some example stellar\-core
configuration files
.SH FILES
.TP
.B stellar\-core.cfg
Configuration file (in current working directory by default)
.RS
.RE
.SH SEE ALSO
.TP
.B <https://www.stellar.org/developers/stellar-core/software/admin.html>
stellar\-core administration guide
.RS
.RE
.TP
.B <https://www.stellar.org>
Home page of Stellar development foundation
.RS
.RE
.SH BUGS
.PP
Please report bugs using the github issue tracker:
.PD 0
.P
.PD
<https://github.com/stellar/stellar-core/issues>
.SH AUTHORS
Stellar Development Foundation.
